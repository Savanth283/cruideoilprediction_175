# -*- coding: utf-8 -*-
"""CrudeOilPricesPreidiction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GbcVqbuMBjT-Q87Vhmi-4ig0lBdI58lc

Method and Data declaration
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler

# Load your crude oil price dataset (replace 'your_dataset.csv' with your actual dataset)
data = pd.read_csv('crude_oil_prices.csv')

# Assuming your dataset has a column 'Price' that contains the crude oil prices
prices = data['Price'].values.reshape(-1, 1)

# Normalize the data to the range [0, 1]
scaler = MinMaxScaler()
prices_normalized = scaler.fit_transform(prices)

# Create sequences of data for training
sequence_length = 30  # You can adjust this based on your dataset
X_train, y_train = [], []

for i in range(len(prices_normalized) - sequence_length):
    X_train.append(prices_normalized[i:i+sequence_length])
    y_train.append(prices_normalized[i+sequence_length])

X_train, y_train = np.array(X_train), np.array(y_train)

# Split the data into training and testing sets
split_ratio = 0.8  # You can adjust this as well
split_index = int(len(X_train) * split_ratio)
X_train, X_test = X_train[:split_index], X_train[split_index:]
y_train, y_test = y_train[:split_index], y_train[split_index:]

"""Model Creation

"""

model = Sequential()
model.add(LSTM(50, activation='relu', input_shape=(X_train.shape[1], X_train.shape[2])))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mean_squared_error')

"""Model Training"""

model.fit(X_train, y_train, epochs=100, batch_size=32)

"""Model Evaluation"""

mse = model.evaluate(X_test, y_test)
print(f"Mean Squared Error on Test Data: {mse}")

"""Prediction"""

import numpy as np

# Initialize an array to store predictions
predictions = []

# Use the last available data point as initial input
current_input = X_test[-1]

for _ in range(175):
    # Reshape the input to match the model's input shape
    current_input = np.reshape(current_input, (1, X_train.shape[1], X_train.shape[2]))

    # Predict the next day's price
    next_day_price = model.predict(current_input)

    # Append the prediction to the list
    predictions.append(next_day_price[0, 0])

    # Update the input for the next iteration
    current_input = np.roll(current_input, shift=-1)
    current_input[0, -1, 0] = next_day_price[0, 0]

# Convert predictions to a numpy array
predictions = np.array(predictions)

"""Saving the Prediction"""

import pandas as pd

# Create a DataFrame for predictions
prediction_df = pd.DataFrame(predictions, columns=['Predicted_Price'])

# Save the predictions to a CSV file
prediction_df.to_csv('user_prediction.csv', index=False)